import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

async function createTestInstructors() {
  console.log('üîç Creating test instructors...')
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Environment variables not loaded properly')
    return
  }
  
  try {
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    
    // Î®ºÏ†Ä Í∏∞Ï°¥ Í∞ïÏÇ¨ ÌîÑÎ°úÌïÑ ÌôïÏù∏
    const { data: existingProfiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, email, full_name')
      .eq('user_type', 'instructor')
      .limit(10)
    
    if (profilesError) {
      console.error('‚ùå Failed to fetch profiles:', profilesError)
      return
    }
    
    if (!existingProfiles || existingProfiles.length === 0) {
      console.log('‚ùå No instructor profiles found')
      return
    }
    
    console.log(`üìã Found ${existingProfiles.length} instructor profiles`)
    
    // ÌÖåÏä§Ìä∏ Í∞ïÏÇ¨ Îç∞Ïù¥ÌÑ∞
    const testInstructors = [
      {
        profile_id: existingProfiles[0].id,
        bio: '10ÎÖÑÍ∞ÑÏùò ÍµêÏú° Í≤ΩÌóòÏùÑ Î∞îÌÉïÏúºÎ°ú Ìö®Í≥ºÏ†ÅÏù∏ ÌïôÏäµ Î∞©Î≤ïÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. ÌäπÌûà ÌîÑÎ°úÍ∑∏ÎûòÎ∞çÍ≥º Ïõπ Í∞úÎ∞ú Î∂ÑÏïºÏóêÏÑú Ï†ÑÎ¨∏ÏÑ±ÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§.',
        location: 'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨',
        hourly_rate: 50000,
        expertise: ['JavaScript', 'React', 'Node.js', 'Ïõπ Í∞úÎ∞ú'],
        experience: '10ÎÖÑ',
        education: 'Ïª¥Ìì®ÌÑ∞Í≥µÌïô ÌïôÏÇ¨',
        certifications: ['AWS Certified Developer', 'Google Cloud Professional'],
        languages: ['ÌïúÍµ≠Ïñ¥', 'ÏòÅÏñ¥']
      },
      {
        profile_id: existingProfiles[Math.min(1, existingProfiles.length - 1)].id,
        bio: 'ÎîîÏûêÏù∏Í≥º UX/UI Î∂ÑÏïºÏóêÏÑú 8ÎÖÑÍ∞Ñ ÌôúÎèôÌïòÎ©∞, ÏÇ¨Ïö©Ïûê Ï§ëÏã¨Ïùò ÎîîÏûêÏù∏ ÏÜîÎ£®ÏÖòÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.',
        location: 'ÏÑúÏö∏Ïãú ÏÑúÏ¥àÍµ¨',
        hourly_rate: 60000,
        expertise: ['UI/UX ÎîîÏûêÏù∏', 'Figma', 'Adobe Creative Suite', 'ÎîîÏûêÏù∏ ÏãúÏä§ÌÖú'],
        experience: '8ÎÖÑ',
        education: 'ÎîîÏûêÏù∏Ìïô ÌïôÏÇ¨',
        certifications: ['Adobe Certified Expert', 'Figma Design System Specialist'],
        languages: ['ÌïúÍµ≠Ïñ¥', 'ÏòÅÏñ¥', 'ÏùºÎ≥∏Ïñ¥']
      },
      {
        profile_id: existingProfiles[Math.min(2, existingProfiles.length - 1)].id,
        bio: 'ÎßàÏºÄÌåÖÍ≥º ÎπÑÏ¶àÎãàÏä§ Ï†ÑÎûµ Î∂ÑÏïºÏùò Ï†ÑÎ¨∏Í∞ÄÎ°ú, Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞òÏùò ÎßàÏºÄÌåÖ Ï†ÑÎûµ ÏàòÎ¶ΩÍ≥º Ïã§ÌñâÏùÑ ÎèÑÏôÄÎìúÎ¶ΩÎãàÎã§.',
        location: 'Î∂ÄÏÇ∞Ïãú Ìï¥Ïö¥ÎåÄÍµ¨',
        hourly_rate: 45000,
        expertise: ['ÎîîÏßÄÌÑ∏ ÎßàÏºÄÌåÖ', 'SEO', 'Google Ads', 'Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù'],
        experience: '12ÎÖÑ',
        education: 'Í≤ΩÏòÅÌïô ÏÑùÏÇ¨',
        certifications: ['Google Ads Certification', 'Google Analytics Individual Qualification'],
        languages: ['ÌïúÍµ≠Ïñ¥', 'ÏòÅÏñ¥']
      },
      {
        profile_id: existingProfiles[Math.min(3, existingProfiles.length - 1)].id,
        bio: 'Ïñ∏Ïñ¥ ÍµêÏú° Ï†ÑÎ¨∏Í∞ÄÎ°ú, Ï≤¥Í≥ÑÏ†ÅÏù¥Í≥† Ìö®Í≥ºÏ†ÅÏù∏ Ïñ∏Ïñ¥ ÌïôÏäµ Î∞©Î≤ïÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. ÌäπÌûà ÎπÑÏ¶àÎãàÏä§ ÏòÅÏñ¥ÏôÄ ÏùºÎ≥∏Ïñ¥ ÍµêÏú°Ïóê ÌäπÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§.',
        location: 'ÎåÄÍµ¨Ïãú ÏàòÏÑ±Íµ¨',
        hourly_rate: 40000,
        expertise: ['ÏòÅÏñ¥ ÍµêÏú°', 'ÏùºÎ≥∏Ïñ¥ ÍµêÏú°', 'ÎπÑÏ¶àÎãàÏä§ ÏòÅÏñ¥', 'TOEIC/TOEFL'],
        experience: '15ÎÖÑ',
        education: 'ÏòÅÏñ¥ÏòÅÎ¨∏Ìïô ÌïôÏÇ¨',
        certifications: ['TESOL Certificate', 'JLPT N1'],
        languages: ['ÌïúÍµ≠Ïñ¥', 'ÏòÅÏñ¥', 'ÏùºÎ≥∏Ïñ¥']
      },
      {
        profile_id: existingProfiles[Math.min(4, existingProfiles.length - 1)].id,
        bio: 'Ï∞ΩÏóÖÍ≥º ÎπÑÏ¶àÎãàÏä§ Í∞úÎ∞ú Ï†ÑÎ¨∏Í∞ÄÎ°ú, Ïä§ÌÉÄÌä∏ÏóÖÎ∂ÄÌÑ∞ ÎåÄÍ∏∞ÏóÖÍπåÏßÄ Îã§ÏñëÌïú Í∑úÎ™®Ïùò Í∏∞ÏóÖÏóêÏÑú Í≤ΩÌóòÏùÑ ÏåìÏïòÏäµÎãàÎã§.',
        location: 'Ïù∏Ï≤úÏãú Ïó∞ÏàòÍµ¨',
        hourly_rate: 70000,
        expertise: ['Ï∞ΩÏóÖ Ïª®ÏÑ§ÌåÖ', 'ÎπÑÏ¶àÎãàÏä§ Ï†ÑÎûµ', 'Ìà¨Ïûê Ïú†Ïπò', 'Í∏∞ÏóÖ Í∞ÄÏπò ÌèâÍ∞Ä'],
        experience: '18ÎÖÑ',
        education: 'Í≤ΩÏòÅÌïô Î∞ïÏÇ¨',
        certifications: ['Certified Business Consultant', 'Venture Capital Professional'],
        languages: ['ÌïúÍµ≠Ïñ¥', 'ÏòÅÏñ¥', 'Ï§ëÍµ≠Ïñ¥']
      }
    ]
    
    console.log(`üìù Creating ${testInstructors.length} test instructors...`)
    
    // Í∏∞Ï°¥ Í∞ïÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú (ÌÖåÏä§Ìä∏Ïö©)
    const { error: deleteError } = await supabase
      .from('instructors')
      .delete()
      .in('profile_id', existingProfiles.map(p => p.id))
    
    if (deleteError) {
      console.error('‚ùå Failed to delete existing instructors:', deleteError)
      return
    }
    
    // Í∞ïÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
    const { data: insertedInstructors, error: insertError } = await supabase
      .from('instructors')
      .insert(testInstructors)
      .select()
    
    if (insertError) {
      console.error('‚ùå Failed to insert instructors:', insertError)
      return
    }
    
    console.log(`‚úÖ Successfully created ${insertedInstructors?.length || 0} test instructors`)
    
    // Í≤∞Í≥º ÌôïÏù∏
    const { data: allInstructors, error: statsError } = await supabase
      .from('instructors')
      .select('*')
    
    if (!statsError && allInstructors) {
      console.log('üìä Final Statistics:')
      console.log(`  - Total instructors: ${allInstructors.length}`)
      
      const expertiseCount = new Set(allInstructors.flatMap(i => i.expertise || [])).size
      const locationCount = new Set(allInstructors.map(i => i.location).filter(Boolean)).size
      
      console.log(`  - Unique expertise areas: ${expertiseCount}`)
      console.log(`  - Unique locations: ${locationCount}`)
      
      console.log('\nüìã Sample instructors:')
      allInstructors.slice(0, 3).forEach((instructor, index) => {
        console.log(`  ${index + 1}. ${instructor.location} - ${instructor.expertise?.join(', ')}`)
      })
    }
    
  } catch (error) {
    console.error('‚ùå Create failed:', error)
  }
}

createTestInstructors()
