import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function checkVerificationData() {
  console.log('üîç Í≤ÄÏ¶ù ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ Ï§ë...')
  
  try {
    // 1. verification_requests ÌÖåÏù¥Î∏î ÌôïÏù∏
    console.log('\nüìã verification_requests ÌÖåÏù¥Î∏î:')
    const { data: verificationRequests, error: vrError } = await supabase
      .from('verification_requests')
      .select('*')
    
    if (vrError) {
      console.error('‚ùå verification_requests Ï°∞Ìöå Ïò§Î•ò:', vrError)
    } else {
      console.log(`‚úÖ Í≤ÄÏ¶ù ÏöîÏ≤≠ Í∞úÏàò: ${verificationRequests?.length || 0}`)
      verificationRequests?.forEach((req, index) => {
        console.log(`  ${index + 1}. ID: ${req.id}`)
        console.log(`     User ID: ${req.user_id}`)
        console.log(`     User Type: ${req.user_type}`)
        console.log(`     Status: ${req.status}`)
        console.log(`     Submitted: ${req.submitted_at}`)
        console.log(`     Reviewed: ${req.reviewed_at}`)
        console.log(`     Reviewed By: ${req.reviewed_by}`)
        console.log(`     Rejection Reason: ${req.rejection_reason || 'N/A'}`)
        console.log('')
      })
    }

    // 2. profiles ÌÖåÏù¥Î∏î ÌôïÏù∏
    console.log('\nüë• profiles ÌÖåÏù¥Î∏î:')
    const { data: profiles, error: pError } = await supabase
      .from('profiles')
      .select('*')
    
    if (pError) {
      console.error('‚ùå profiles Ï°∞Ìöå Ïò§Î•ò:', pError)
    } else {
      console.log(`‚úÖ ÌîÑÎ°úÌïÑ Í∞úÏàò: ${profiles?.length || 0}`)
      profiles?.forEach((profile, index) => {
        console.log(`  ${index + 1}. ID: ${profile.id}`)
        console.log(`     User ID: ${profile.user_id}`)
        console.log(`     Full Name: ${profile.full_name}`)
        console.log(`     Email: ${profile.email}`)
        console.log(`     User Type: ${profile.user_type}`)
        console.log('')
      })
    }

    // 3. auth.users ÌÖåÏù¥Î∏î ÌôïÏù∏
    console.log('\nüîê auth.users ÌÖåÏù¥Î∏î:')
    const { data: users, error: uError } = await supabase.auth.admin.listUsers()
    
    if (uError) {
      console.error('‚ùå auth.users Ï°∞Ìöå Ïò§Î•ò:', uError)
    } else {
      console.log(`‚úÖ ÏÇ¨Ïö©Ïûê Í∞úÏàò: ${users?.users?.length || 0}`)
      users?.users?.forEach((user, index) => {
        console.log(`  ${index + 1}. ID: ${user.id}`)
        console.log(`     Email: ${user.email}`)
        console.log(`     Created: ${user.created_at}`)
        console.log('')
      })
    }

    // 4. JOIN ÏøºÎ¶¨Î°ú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    console.log('\nüîó JOIN ÏøºÎ¶¨ Í≤∞Í≥º:')
    const { data: joinedData, error: jError } = await supabase
      .from('verification_requests')
      .select(`
        *,
        user_profile:profiles!verification_requests_user_id_fkey(
          id,
          full_name,
          email,
          user_type
        )
      `)
      .order('submitted_at', { ascending: false })
    
    if (jError) {
      console.error('‚ùå JOIN ÏøºÎ¶¨ Ïò§Î•ò:', jError)
    } else {
      console.log(`‚úÖ JOIN Í≤∞Í≥º Í∞úÏàò: ${joinedData?.length || 0}`)
      joinedData?.forEach((item, index) => {
        console.log(`  ${index + 1}. Verification ID: ${item.id}`)
        console.log(`     User ID: ${item.user_id}`)
        console.log(`     Status: ${item.status}`)
        console.log(`     Profile: ${item.user_profile ? `${item.user_profile.full_name} (${item.user_profile.email})` : 'No profile found'}`)
        console.log('')
      })
    }

  } catch (error) {
    console.error('‚ùå Ï†ÑÏ≤¥ Ïò§Î•ò:', error)
  }
}

checkVerificationData()
