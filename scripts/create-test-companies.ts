import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    storageKey: 'speakerlink-auth',
    autoRefreshToken: true,
    detectSessionInUrl: false,
    flowType: 'pkce',
    debug: true
  }
})

async function createTestCompanies() {
  console.log('üè¢ Creating test companies...')
  
  try {
    // 1. Í¥ÄÎ¶¨Ïûê Í≥ÑÏ†ï ÏÉùÏÑ± (Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï† Ïàò ÏûàÏùå)
    console.log('1Ô∏è‚É£ Creating admin account...')
    const { data: adminAuth, error: adminAuthError } = await supabase.auth.signUp({
      email: 'admin@test.com',
      password: 'test123456'
    })

    if (adminAuthError && adminAuthError.message !== 'A user with this email address has already been registered') {
      console.error('‚ùå Admin auth error:', adminAuthError)
      return
    }

    // 2. Í¥ÄÎ¶¨Ïûê ÌîÑÎ°úÌïÑ ÏÉùÏÑ±
    console.log('2Ô∏è‚É£ Creating admin profile...')
    const adminUserId = adminAuth?.user?.id || 'bce5cc73-7946-4477-b464-64e36f8363f1' // Í∏∞Ï°¥ ID ÏÇ¨Ïö©
    
    const { error: adminProfileError } = await supabase
      .from('profiles')
      .upsert({
        id: adminUserId,
        email: 'admin@test.com',
        full_name: 'Í¥ÄÎ¶¨Ïûê',
        user_type: 'instructor',
        is_verified: true,
        verified_at: new Date().toISOString()
      })

    if (adminProfileError && adminProfileError.message !== 'duplicate key value violates unique constraint "profiles_pkey"') {
      console.error('‚ùå Admin profile error:', adminProfileError)
      return
    }

    // 3. ÌÖåÏä§Ìä∏ Í∏∞ÏóÖ Í≥ÑÏ†ïÎì§ ÏÉùÏÑ±
    const testCompanies = [
      {
        email: 'contact@techcorp.com',
        password: 'test123456',
        full_name: 'ÍπÄÍ∏∞ÏóÖ',
        company_name: 'ÌÖåÌÅ¨ÏΩîÌîÑ',
        industry: 'IT/ÏÜåÌîÑÌä∏Ïõ®Ïñ¥',
        company_size: '50-100Î™Ö',
        description: 'ÌòÅÏã†Ï†ÅÏù∏ ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ ÏÜîÎ£®ÏÖòÏùÑ Ï†úÍ≥µÌïòÎäî IT Í∏∞ÏóÖÏûÖÎãàÎã§.'
      },
      {
        email: 'hr@financebank.com',
        password: 'test123456',
        full_name: 'Ïù¥Í∏àÏúµ',
        company_name: 'ÌååÏù¥ÎÇ∏Ïä§Î±ÖÌÅ¨',
        industry: 'Í∏àÏúµ',
        company_size: '500Î™Ö Ïù¥ÏÉÅ',
        description: 'Í≥†Í∞ù Ï§ëÏã¨Ïùò Í∏àÏúµ ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÎäî ÏùÄÌñâÏûÖÎãàÎã§.'
      },
      {
        email: 'info@manufacturing.co.kr',
        password: 'test123456',
        full_name: 'Î∞ïÏ†úÏ°∞',
        company_name: 'Îß§Îâ¥Ìå©Ï≤òÎßÅ',
        industry: 'Ï†úÏ°∞ÏóÖ',
        company_size: '100-500Î™Ö',
        description: 'Í≥†ÌíàÏßà Ï†úÏ°∞ ÏÜîÎ£®ÏÖòÏùÑ Ï†úÍ≥µÌïòÎäî Ï†úÏ°∞ÏóÖÏ≤¥ÏûÖÎãàÎã§.'
      },
      {
        email: 'contact@biohealth.com',
        password: 'test123456',
        full_name: 'ÏµúÎ∞îÏù¥Ïò§',
        company_name: 'Î∞îÏù¥Ïò§Ìó¨Ïä§',
        industry: 'ÏùòÎ£å/Î∞îÏù¥Ïò§',
        company_size: '50-100Î™Ö',
        description: 'ÌòÅÏã†Ï†ÅÏù∏ ÏùòÎ£å Í∏∞Ïà†ÏùÑ Í∞úÎ∞úÌïòÎäî Î∞îÏù¥Ïò§ Í∏∞ÏóÖÏûÖÎãàÎã§.'
      },
      {
        email: 'info@eduplus.com',
        password: 'test123456',
        full_name: 'Ï†ïÍµêÏú°',
        company_name: 'ÏóêÎìÄÌîåÎü¨Ïä§',
        industry: 'ÍµêÏú°',
        company_size: '10-50Î™Ö',
        description: 'Ï∞®ÏÑ∏ÎåÄ ÍµêÏú° ÌîåÎû´ÌèºÏùÑ Ï†úÍ≥µÌïòÎäî ÍµêÏú° Í∏∞ÏóÖÏûÖÎãàÎã§.'
      }
    ]

    console.log('3Ô∏è‚É£ Creating test company accounts...')
    
    for (const company of testCompanies) {
      try {
        // Í∏∞ÏóÖ Í≥ÑÏ†ï ÏÉùÏÑ±
        const { data: authData, error: authError } = await supabase.auth.signUp({
          email: company.email,
          password: company.password
        })

        if (authError && authError.message !== 'A user with this email address has already been registered') {
          console.error(`‚ùå Auth error for ${company.email}:`, authError)
          continue
        }

        const userId = authData?.user?.id
        if (!userId) {
          console.log(`‚ö†Ô∏è User already exists for ${company.email}`)
          // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ID Ï∞æÍ∏∞
          const { data: existingUser } = await supabase
            .from('profiles')
            .select('id')
            .eq('email', company.email)
            .single()
          
          if (existingUser) {
            console.log(`‚úÖ Found existing user for ${company.email}: ${existingUser.id}`)
          } else {
            console.error(`‚ùå Could not find user for ${company.email}`)
            continue
          }
        }

        // ÌîÑÎ°úÌïÑ ÏÉùÏÑ±
        const { error: profileError } = await supabase
          .from('profiles')
          .upsert({
            id: userId || 'existing-user-id',
            email: company.email,
            full_name: company.full_name,
            user_type: 'company',
            is_verified: true,
            verified_at: new Date().toISOString()
          })

        if (profileError && profileError.message !== 'duplicate key value violates unique constraint "profiles_pkey"') {
          console.error(`‚ùå Profile error for ${company.email}:`, profileError)
          continue
        }

        // Í∏∞ÏóÖ ÌîÑÎ°úÌïÑ ÏÉùÏÑ±
        const { error: companyError } = await supabase
          .from('companies')
          .upsert({
            profile_id: userId || 'existing-user-id',
            company_name: company.company_name,
            industry: company.industry,
            company_size: company.company_size,
            description: company.description
          })

        if (companyError && companyError.message !== 'duplicate key value violates unique constraint "companies_profile_id_key"') {
          console.error(`‚ùå Company error for ${company.email}:`, companyError)
          continue
        }

        console.log(`‚úÖ Created company: ${company.company_name} (${company.email})`)
      } catch (error) {
        console.error(`‚ùå Error creating company ${company.email}:`, error)
      }
    }

    console.log('‚úÖ Test companies creation completed!')
    
    // 4. ÏÉùÏÑ±Îêú Í∏∞ÏóÖ Î™©Î°ù ÌôïÏù∏
    console.log('4Ô∏è‚É£ Checking created companies...')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select(`
        *,
        profile:profiles(id, email, full_name, is_verified)
      `)
      .order('created_at', { ascending: false })

    if (companiesError) {
      console.error('‚ùå Error fetching companies:', companiesError)
    } else {
      console.log('üìä Created companies:')
      companies?.forEach((company, index) => {
        console.log(`${index + 1}. ${company.company_name} (${company.profile?.email})`)
      })
    }

  } catch (error) {
    console.error('‚ùå Test companies creation error:', error)
  }
}

createTestCompanies()
