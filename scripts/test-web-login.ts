import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// ÌôòÍ≤Ω Î≥ÄÏàò Î°úÎìú
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// Ïõπ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÍ≥º ÎèôÏùºÌïú ÏÑ§Ï†ïÏúºÎ°ú Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    storageKey: 'speakerlink-auth',
    autoRefreshToken: true,
    detectSessionInUrl: false,
    flowType: 'pkce',
    debug: true,
    storage: typeof window !== 'undefined' ? window.localStorage : undefined
  }
})

async function testWebLogin() {
  console.log('üåê Testing web login simulation...')
  
  try {
    // 1. Ï¥àÍ∏∞ ÏÑ∏ÏÖò ÌôïÏù∏
    console.log('1Ô∏è‚É£ Checking initial session...')
    const { data: { session: initialSession }, error: initialError } = await supabase.auth.getSession()
    
    if (initialError) {
      console.error('‚ùå Initial session error:', initialError)
      return
    }
    
    if (initialSession) {
      console.log('‚úÖ Initial session found:', initialSession.user.email)
      return
    }
    
    console.log('‚ùå No initial session found')
    
    // 2. Î°úÍ∑∏Ïù∏ ÏãúÎèÑ
    console.log('2Ô∏è‚É£ Attempting login...')
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'admin@test.com',
      password: 'test123456'
    })
    
    if (authError) {
      console.error('‚ùå Login error:', authError)
      return
    }
    
    if (!authData.user || !authData.session) {
      console.error('‚ùå Login failed: no user or session data')
      return
    }
    
    console.log('‚úÖ Login successful:', authData.user.email)
    console.log('üìÑ Session data:', {
      access_token: !!authData.session.access_token,
      refresh_token: !!authData.session.refresh_token,
      expires_at: authData.session.expires_at
    })
    
    // 3. Î°úÍ∑∏Ïù∏ ÌõÑ ÏÑ∏ÏÖò ÌôïÏù∏
    console.log('3Ô∏è‚É£ Checking session after login...')
    const { data: { session: postLoginSession }, error: postLoginError } = await supabase.auth.getSession()
    
    if (postLoginError) {
      console.error('‚ùå Post-login session error:', postLoginError)
      return
    }
    
    if (postLoginSession) {
      console.log('‚úÖ Post-login session confirmed:', postLoginSession.user.email)
    } else {
      console.error('‚ùå Post-login session not found')
    }
    
    // 4. ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    console.log('4Ô∏è‚É£ Checking profile data...')
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', authData.user.id)
      .single()
    
    if (profileError) {
      console.error('‚ùå Profile error:', profileError)
    } else {
      console.log('‚úÖ Profile found:', profile.full_name)
    }
    
    // 5. Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÍ≤Ω Î¶¨Ïä§ÎÑà ÌÖåÏä§Ìä∏
    console.log('5Ô∏è‚É£ Testing auth state change listener...')
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        console.log('üîÑ Auth state change:', event, session?.user?.email)
      }
    )
    
    // 6. Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ ÏÑ∏ÏÖò Ïû¨ÌôïÏù∏
    console.log('6Ô∏è‚É£ Waiting and rechecking session...')
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    const { data: { session: finalSession } } = await supabase.auth.getSession()
    if (finalSession) {
      console.log('‚úÖ Final session check successful:', finalSession.user.email)
    } else {
      console.error('‚ùå Final session check failed')
    }
    
    // Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨
    subscription.unsubscribe()
    
  } catch (error) {
    console.error('‚ùå Test error:', error)
  }
}

testWebLogin()
