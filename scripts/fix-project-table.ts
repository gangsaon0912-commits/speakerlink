import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// .env.local ÌååÏùº Î°úÎìú
dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function fixProjectTable() {
  try {
    console.log('üöÄ Fixing project table structure...')
    
    // 1. ÌïÑÏöîÌïú Ïª¨ÎüºÎì§ Ï∂îÍ∞Ä
    console.log('üìù Adding new columns...')
    
    // category Ïª¨Îüº Ï∂îÍ∞Ä
    const { error: categoryError } = await supabase
      .from('projects')
      .select('category')
      .limit(1)
    
    if (categoryError && categoryError.message.includes('column')) {
      console.log('Adding category column...')
      // Ïã§Ï†úÎ°úÎäî Supabase DashboardÏóêÏÑú ÏßÅÏ†ë Ï∂îÍ∞ÄÌï¥Ïïº Ìï®
    }
    
    // 2. Í∏∞Ï°¥ ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    const { data: existingProjects, error: fetchError } = await supabase
      .from('projects')
      .select('*')
    
    if (fetchError) {
      console.error('‚ùå Error fetching projects:', fetchError)
      return
    }
    
    console.log(`üìã Found ${existingProjects?.length || 0} existing projects`)
    
    // 3. Í∏∞Ï°¥ ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    if (existingProjects && existingProjects.length > 0) {
      for (const project of existingProjects) {
        const updateData: any = {}
        
        // Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ§Ï†ï
        if (project.title.includes('Ïõπ') || project.title.includes('Í∞úÎ∞ú')) {
          updateData.category = 'Í∞úÎ∞ú'
        } else if (project.title.includes('AI') || project.title.includes('Î®∏Ïã†')) {
          updateData.category = 'Í∞úÎ∞ú'
        } else if (project.title.includes('Î™®Î∞îÏùº') || project.title.includes('Ïï±')) {
          updateData.category = 'Í∞úÎ∞ú'
        } else {
          updateData.category = 'Í∏∞ÌÉÄ'
        }
        
        // ÏòàÏÇ∞ Î≤îÏúÑ ÏÑ§Ï†ï
        if (project.budget_min && project.budget_max) {
          updateData.budget_range = `${project.budget_min}ÎßåÏõê - ${project.budget_max}ÎßåÏõê`
        } else {
          updateData.budget_range = 'ÌòëÏùò'
        }
        
        // Í∏∞Í∞Ñ ÏÑ§Ï†ï
        if (project.duration_weeks) {
          updateData.duration = `${project.duration_weeks}Ï£º`
        } else {
          updateData.duration = 'ÌòëÏùò'
        }
        
        // ÏöîÍµ¨ÏÇ¨Ìï≠ ÏÑ§Ï†ï
        if (project.skills_required) {
          updateData.requirements = project.skills_required
        } else {
          updateData.requirements = []
        }
        
        // applications_count ÏÑ§Ï†ï
        updateData.applications_count = 0
        
        // ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìñâ
        const { error: updateError } = await supabase
          .from('projects')
          .update(updateData)
          .eq('id', project.id)
        
        if (updateError) {
          console.error(`‚ùå Error updating project ${project.title}:`, updateError)
        } else {
          console.log(`‚úÖ Updated project: ${project.title}`)
        }
      }
    }
    
    // 4. ÏµúÏ¢Ö ÌôïÏù∏
    const { data: finalProjects, error: finalError } = await supabase
      .from('projects')
      .select('*')
      .limit(3)
    
    if (finalError) {
      console.error('‚ùå Error fetching final projects:', finalError)
      return
    }
    
    console.log('\nüìã Final project structure:')
    finalProjects?.forEach((project, index) => {
      console.log(`${index + 1}. ${project.title}`)
      console.log(`   Category: ${project.category || 'N/A'}`)
      console.log(`   Budget: ${project.budget_range || 'N/A'}`)
      console.log(`   Duration: ${project.duration || 'N/A'}`)
      console.log(`   Requirements: ${project.requirements?.join(', ') || 'N/A'}`)
      console.log(`   Applications: ${project.applications_count || 0}`)
      console.log('')
    })
    
    console.log('üéâ Project table structure fixed!')
    console.log('\nüí° Note: If you see "N/A" values, you may need to add the columns manually in Supabase Dashboard:')
    console.log('   - category (VARCHAR(100))')
    console.log('   - budget_range (VARCHAR(255))')
    console.log('   - duration (VARCHAR(100))')
    console.log('   - requirements (TEXT[])')
    console.log('   - applications_count (INTEGER DEFAULT 0)')
    
  } catch (error) {
    console.error('‚ùå Error fixing project table:', error)
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
fixProjectTable()
